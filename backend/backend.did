// GitHub Service

type Issue = record {
  state: opt text;
  login: opt text;
  id: opt text;
  milestone_state: opt text;
  closed_at: opt text;
  reason: opt text;
};

type Link = record {
  issue: opt IssueLink;
};

type IssueLink = record {
  href: opt text;
};

type FixedByErr = variant {
  IssueNotFound : record { github_issue_id : text };
  Rejected : record { error_message : text };
};

type FixedByReceipt = variant {
  Err: FixedByErr;
  Ok: text;
};

type IsMergedErr = variant {
  Rejected : record { error_message : text };
};

type IsMergedReceipt = variant {
  Err: IsMergedErr;
  Ok: text;
};

type IssueErr = variant {
  Rejected : record { error_message : text };
};

type IssueReceipt = variant {
  Err: IssueErr;
  Ok: Issue;
};

type MergeDetailsErr = variant {
  Rejected : record { error_message : text };
};

type MergeDetailsReceipt = variant {
  Err: MergeDetailsErr;
  Ok: PrDetailsResponse;
};

type PrDetailsResponse = record {
  state: opt text;
  closed_at: opt text;
  merge_commit_sha: opt text;
  merged_at: opt text;
  links: opt Link;
  merged: opt bool;
  merged_by: opt User;
};

type User = record {
  login: opt text;
  id: opt nat64;
};

type GithubToken = text;

type GithubIssueId = text;

type GithubPullRequestId = text;

type BountyAmount = nat32;

// Bounty Service

type Contributor = record {
  address: principal;
  crypto_address: text;
};

type DepositErr = variant {
  TransferFailure : record { reason : text };
};

type DepositReceipt = variant {
  Err: DepositErr;
  Ok: nat;
};

type AcceptErr = variant {
  IssueNotFound : record { GithubIssueId };
};

type AcceptReceipt = opt AcceptErr;

type RegisterIssueErr = ()

type RegisterIssueReceipt = opt RegisterIssueErr;

type UnRegisterIssueErr = variant {
  IssueNotFound;
};

type UnRegisterIssueReceipt = opt UnRegisterIssueErr;

service : (authority: principal) -> {

    // GitHub Service
    "get_issue": (GithubToken) -> (IssueReceipt);
    "get_fixed_by": (GithubToken) -> (FixedByReceipt);
    "get_is_merged": (GithubToken) -> (IsMergedReceipt);
    "get_merged_details": (GithubToken) -> (MergeDetailsReceipt);

    // Bounty Service
    "healthcheck": () -> (text);
    "accept": (Contributor, GithubIssueId, GithubPullRequestId) -> (AcceptReceipt);
    "deposit": () -> (DepositReceipt);
    "register_issue": (Contributor, GithubIssueId, BountyAmount) -> (RegisterIssueReceipt);
    "unregister_issue": (GithubIssueId) -> (UnRegisterIssueReceipt);
}