// GitHub Service

type Issue = record {
    state: opt text;
    login: opt text;
    id: opt text;
    milestone_state: opt text;
    closed_at: opt text;
    reason: opt text;
};

type Link = record {
    issue: opt IssueLink;
};

type IssueLink = record {
    href: opt text;
};

type FixedByErr = variant {
  IssueNotFound : record { github_issue_id : text };
};

type FixedByReceipt =  variant {
  Err: FixedByErr;
  Ok: text;
};

type PrDetailsResponse = record {
    state: opt text;
    closed_at: opt text;
    merge_commit_sha: opt text;
    merged_at: opt text;
    links: opt Link;
    merged: opt bool;
    merged_by: opt User;
};

type User = record {
    login: opt text;
    id: opt nat64;
};

type GithubToken = text;

// Bounty Service

type Contributor = record {
    address: principal;
    crypto_address: text;
};

type DepositReceipt =  variant {
  Err: DepositErr;
  Ok: nat;
};

type DepositErr = variant {
  TransferFailure : record { reason : text };
};

service : (authority: principal) -> {
    // GitHub Service
    "get_issue": (GithubToken) -> (Issue);
    "get_fixed_by": (GithubToken) -> (FixedByReceipt);
    "get_is_merged": (GithubToken) -> (text);
    "get_merged_details": (GithubToken) -> (PrDetailsResponse);
    // Bounty Service
    "healthcheck": () -> (text);
    "accept": (Contributor, github_issue_id: text, github_pr_id: text) -> ();
    "deposit": () -> (DepositReceipt);
}


